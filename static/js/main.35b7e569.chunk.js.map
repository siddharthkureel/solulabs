{"version":3,"sources":["component/OrderBook/index.js","component/ticker/bitcoin-logo.png","component/ticker/index.js","App.js","index.js"],"names":["styles","container","display","backgroundColor","height","width","color","name","margin","table","lineHeight","padding","tbody","textAlign","OrderBook","connect","setUpdate","update","disconnect","useState","buyOrder","setBuyOrder","sellOrder","setSellOrder","channelID","setChannelID","buys","sells","useEffect","wss","WebSocket","msg","JSON","stringify","event","channel","symbol","freq","onopen","send","onmessage","data","parse","Array","isArray","length","forEach","order","push","setTimeout","orders","unshift","pop","error","console","log","style","map","i","toFixed","logo","backgroundImage","backgroundRepeat","backgroundSize","left","subContainer","justifyContent","Ticker","price","setPrice","low","setLow","high","setHigh","volume","setVolume","dailyChange","setDailyChange","DAILY_CHANGE","LAST_PRICE","VOLUME","HIGH","LOW","chanId","onclose","window","location","reload","App","setConnect","setDisconnect","className","buttons","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35b7e569.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst OrderBook = ({ connect, setUpdate, update, disconnect }) => {\r\n\r\n    const [buyOrder, setBuyOrder] = useState([]);\r\n    const [sellOrder, setSellOrder] = useState([]);\r\n    const [channelID, setChannelID] = useState(0);\r\n    let buys = [];\r\n    let sells = [];\r\n\r\n    useEffect(() => {\r\n\r\n        const wss = new WebSocket('wss://api-pub.bitfinex.com/ws/2');\r\n\r\n        if (connect) {\r\n            let msg = JSON.stringify({ \r\n                event: 'subscribe', \r\n                channel: 'book', \r\n                symbol: 'tBTCUSD',\r\n                freq: 'F1'\r\n            });\r\n            wss.onopen = () => wss.send(msg)\r\n            wss.onmessage = (msg) => {\r\n                const data = JSON.parse(msg.data);\r\n                if (Array.isArray(data[1])) {\r\n                    if ( data[1].length > 10) {\r\n                        setChannelID(data[0])\r\n                        // [48278, 1, 0.00119345]\r\n                        // [48304, 2, -0.84250245]\r\n                        const orders = data[1];\r\n                        orders.forEach(order => {\r\n                            if (order[2] > 0) {\r\n                                buys.push(order);\r\n                            } else {\r\n                                sells.push(order);\r\n                            }\r\n                        });\r\n                        setTimeout(() => {\r\n                            setUpdate(true)\r\n                        }, 100);\r\n                    } else if (update) {\r\n                        const orders = data[1];\r\n                        if (orders[2] > 0) {\r\n                            buys.unshift(orders);\r\n                            buys.pop();\r\n                        } else {\r\n                            sells.unshift(orders);\r\n                            sells.pop();\r\n                        }\r\n                    }\r\n                    setBuyOrder(buys);\r\n                    setSellOrder(sells);\r\n                }\r\n            }\r\n        }\r\n        if (disconnect) {\r\n            try {\r\n                wss.send({\r\n                    \"event\": \"unsubscribe\",\r\n                    \"chanId\": channelID\r\n                })\r\n            } catch (error) {\r\n                console.log(error)\r\n            } \r\n        }\r\n    },[connect, update, disconnect]);\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <table style={styles.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Total</th>\r\n                        <th>Price</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody style={styles.tbody}>\r\n                {\r\n                    buyOrder ?\r\n                        buyOrder.map((order, i)=>(\r\n                            <tr key={i}>\r\n                                <td>{order[2].toFixed(2)}</td>\r\n                                <td>{order[0]}</td>\r\n                            </tr>\r\n                        ))\r\n                        :\r\n                        <div></div>\r\n                }\r\n                </tbody>\r\n            </table>\r\n            <table style={styles.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Price</th>\r\n                        <th>Total</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody style={styles.tbody}>\r\n                {\r\n                    sellOrder ?\r\n                        sellOrder.map((order, i)=>(\r\n                            <tr key={i}>\r\n                                <td>{order[0]}</td>\r\n                                <td>{order[2].toFixed(2)}</td>\r\n                            </tr>\r\n                        ))\r\n                        :\r\n                        <div></div>\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    container: {\r\n        display: 'flex',\r\n        backgroundColor: '#253038',\r\n        height: 'auto',\r\n        width: '600px',\r\n        color: 'white'\r\n    },\r\n    name: {\r\n        color: 'white',\r\n        margin: 'auto 0'\r\n    },\r\n    table: {\r\n        width: '50%',\r\n        lineHeight: '1.4',\r\n        padding: '10px'\r\n    },\r\n    tbody: {\r\n        textAlign: 'center'\r\n    }\r\n}\r\n\r\nexport default OrderBook;\r\n","export default __webpack_public_path__ + \"static/media/bitcoin-logo.24f2f953.png\";","import React, { useEffect, useState } from 'react';\r\nimport logo from './bitcoin-logo.png';\r\n\r\nconst Ticker = ({ connect, disconnect }) => {\r\n\r\n    const [price, setPrice] = useState(0);\r\n    const [low, setLow] = useState(0);\r\n    const [high, setHigh] = useState(0);\r\n    const [volume, setVolume] = useState(0);\r\n    const [dailyChange, setDailyChange] = useState(0);\r\n    const [channelID, setChannelID] = useState(0);\r\n    \r\n    \r\n    useEffect(() => {\r\n\r\n        const wss = new WebSocket('wss://api-pub.bitfinex.com/ws/2');\r\n\r\n        if (connect) {\r\n            let msg = JSON.stringify({ \r\n                event: 'subscribe', \r\n                channel: 'ticker', \r\n                symbol: 'tBTCUSD' \r\n            })\r\n            wss.onopen = () => wss.send(msg)\r\n            wss.onmessage = (msg) => {\r\n                const data = JSON.parse(msg.data);\r\n                if(Array.isArray(data[1])){\r\n                    // [ BID, BID_SIZE, ASK, ASK_SIZE, DAILY_CHANGE, DAILY_CHANGE_RELATIVE, LAST_PRICE, VOLUME, HIGH, LOW ]\r\n                    //destructure of above data\r\n                    const [ , , , , DAILY_CHANGE, , LAST_PRICE, VOLUME, HIGH, LOW ] = data[1]\r\n                    setChannelID(data[0])\r\n                    setPrice(LAST_PRICE.toFixed(2));\r\n                    setDailyChange(DAILY_CHANGE.toFixed(2));\r\n                    setLow(LOW.toFixed(2));\r\n                    setHigh(HIGH.toFixed(2));\r\n                    setVolume(VOLUME.toFixed(2));\r\n                }\r\n            }\r\n        }\r\n        if (disconnect) {\r\n            try {\r\n                \r\n                let msg = JSON.stringify({ \r\n                    event: 'unsubscribe', \r\n                    chanId: channelID, \r\n                })\r\n                wss.onclose = () => wss.send(msg)\r\n\r\n            } catch (error) {\r\n                console.log(error)\r\n            } finally {\r\n                window.location.reload()\r\n            }\r\n        }\r\n        \r\n    },[connect, disconnect])\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <div style={styles.logo}>\r\n            </div>\r\n            <div style={styles.subContainer}>\r\n                <div style={styles.left}>\r\n                        <span>BTC/USD</span><br/>\r\n                        <span>VOL &nbsp;{volume}</span><br/>\r\n                        <span>LOW &nbsp;{low}</span>\r\n                    </div>\r\n                    <div style={styles.left}>\r\n                        <span>{price}</span><br/>\r\n                        <span>{dailyChange}</span><br/>\r\n                        <span>HIGH &nbsp;{high}</span>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    container: {\r\n        display: 'flex',\r\n        backgroundColor: '#253038',\r\n        height: '120px',\r\n        width: '600px',\r\n        lineHeight: '1.4'\r\n    },\r\n    logo: {\r\n        height: '40px',\r\n        width: '50px',\r\n        backgroundImage: `url(${logo})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '40px 40px',\r\n        margin: 'auto 15px'\r\n    },\r\n    left: {\r\n        color: 'white',\r\n        margin: 'auto 0'\r\n    },\r\n    subContainer: {\r\n        display: 'flex',\r\n        height: '120px',\r\n        width: '100%',\r\n        justifyContent: 'space-between',\r\n        padding: '0 20px'\r\n    },\r\n}\r\n\r\nexport default Ticker;\r\n","import React, { useState } from 'react';\nimport OrderBook from './component/OrderBook/index';\nimport Ticker from './component/ticker';\n\nfunction App() {\n\n  const [connect, setConnect] = useState(null);\n  const [disconnect, setDisconnect] = useState(null);\n  const [update, setUpdate] = useState(false);\n\n  const handleConnect = () => {\n    setConnect(true);\n  }\n  const handleDisconnect = () => {\n    setDisconnect(true);\n  }\n\n  return (\n    <div className=\"App\" style={styles.container}> \n      <div style={styles.buttons}>\n          <button onClick={handleConnect}>Connect</button>\n          <button onClick={handleDisconnect}>DisConnect</button>\n      </div>\n      <Ticker connect={connect} disconnect={disconnect}/>\n        <br/>\n      <OrderBook connect={connect} update={update} setUpdate={setUpdate} disconnect={disconnect} />\n    </div>\n  );\n}\n\nconst styles = {\n  container: { display: 'table', margin: 'auto' }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}